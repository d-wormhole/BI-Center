#加载需要的包
library(readxl)
library(dplyr)
library(plyr)
# library(shiny)
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#创建筛选器及对应选项
#创建属性数据框
# 添加一个选择器
# attr_select_1 <- fluidPage(
#   # 添加一个选择器
#   selectInput("column", "选择属性:", choices = names(stocks)[16:24]),
#   # 添加一个表格来显示筛选后的数据
#   tableOutput("table")
# )
# # 定义服务器逻辑
# server <- function(input, output) {
#   # 假设df是你的数据框
#   # 根据用户的选择筛选数据
#   output$table <- renderTable({
#     stocks[, input$column]
#   })
# }
# # 运行应用
# shinyApp(ui = attr_select_1, server = server)
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#加载需要的包
library(readxl)
library(dplyr)
library(plyr)
library(shiny)
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#创建筛选器及对应选项
#创建属性数据框
# 添加一个选择器
attr_select_1 <- fluidPage(
# 添加一个选择器
selectInput("column", "选择属性:", choices = names(stocks)[16:24]),
# 添加一个表格来显示筛选后的数据
tableOutput("table")
)
# 定义服务器逻辑
server <- function(input, output) {
# 假设df是你的数据框
# 根据用户的选择筛选数据
output$table <- renderTable({
stocks[, input$column]
})
}
# 运行应用
shinyApp(ui = attr_select_1, server = server)
warnings()
应选项
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#加载需要的包
library(readxl)
library(dplyr)
library(plyr)
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
warning()
warnings()
warnings()
#加载需要的包
library(readxl)
library(dplyr)
library(plyr)
library(shiny)
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#创建筛选器及对应选项
#创建属性数据框
# 添加一个选择器
attr_select_1 <- fluidPage(
# 添加一个选择器
selectInput("column", "选择属性:", choices = names(stocks)[16:24]),
# 添加一个表格来显示筛选后的数据
tableOutput("table")
)
# 定义服务器逻辑
server <- function(input, output) {
# 假设df是你的数据框
# 根据用户的选择筛选数据
output$table <- renderTable({
stocks[, input$column]
})
}
# 运行应用
shinyApp(ui = attr_select_1, server = server)
warnings()
#加载需要的包
install.packages("readxl")
library(readxl)
library(dplyr)
library(plyr)
library(shiny)
#源数据读取
stocks<- read_excel("/Users/bounre/Desktop/tableau数据源/田果果数据/20240101-0725业务单据/库存.xlsx")
#数据处理
#删除所有“行”都是“空”的列
stocks<- stocks %>% select(-which(sapply(., function(x) all(is.na(x) | x == ""))))
#将”空值“赋值为“未分类”
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#创建筛选器及对应选项
#创建属性数据框
# 添加一个选择器
attr_select_1 <- fluidPage(
# 添加一个选择器
selectInput("column", "选择属性:", choices = names(stocks)[16:24]),
# 添加一个表格来显示筛选后的数据
tableOutput("table")
)
# 定义服务器逻辑
server <- function(input, output) {
# 假设df是你的数据框
# 根据用户的选择筛选数据
output$table <- renderTable({
stocks[, input$column]
})
}
# 运行应用
shinyApp(ui = attr_select_1, server = server)
library(shiny); runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
library(shiny); runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
View(attr_select_1)
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
install.packages("shiny")
library(shiny); runApp('Library/CloudStorage/OneDrive-个人/R实践学习/库存按属性汇总.R')
install.packages("rmarkdown")
install.packages("pki")
install.packages("PKI")
install.packages("ggplot2")
View(server)
View(stocks)
View(stocks)
install.packages("DT")
## R Markdown
#加载需要的包~~
library(readxl)
library(plyr)
library(dplyr)
library(shiny)
library(DT)
#源数据读取
stocks<- read_excel("./库存.xlsx",col_types = c("text","text","text","text","text","text","text","text","text","numeric","numeric","numeric","numeric","numeric","numeric","text", "text", "text", "text", "text", "text", "text","text", "text", "text", "text", "text", "text","text", "text","text"))
#数据处理
#将”空值“赋值为“未分类
stocks[] <- lapply(stocks, function(x) ifelse(is.na(x), "未定义", x))
#创建筛选器及对应选项
#创建属性数据框
#添加选择器设置按钮对齐及样式
attr_select_1 <- fluidPage(
tags$head(
tags$style(HTML("
.filter-and-button {
display: flex;
justify-content: flex-start;
align-items: center;
margin: auto;
}
.attributes {
display: flex;
justify-content: flex-start;
align-items: flex-end;
margin: auto;
}
.custom-table{
font-size: 14px;
border-collapse: collapse;
width: 100%;
}
"))
),
# 设置可选项
# 使用fluidRow布局函数创建响应式对齐布局
fluidRow(column(6,offset=0,
# 设置”请选择仓库=”““未默认选项，即不选择任何仓库，必须要添加该”默认选项“才可以支持后续的”重置“选项
selectInput("storage_name", "选择仓库:", choices =c("全部"="全部",unique(stocks$仓库名称))))),
fluidRow(column(6,offset=0,class = "attributes",
selectInput("attributes_name_1", "选择要统计的属性:", choices = names(stocks)[16:24]),
selectInput("attributes_name_2", "",choices = names(stocks)[16:24]))),
DT::dataTableOutput("myTable")
)
# 定义服务器逻辑
server <- function(input, output, session) {
# 假设df是你的数据框
# 根据用户的选择筛选数据
output$attrsTable<- DT::renderDataTable({
selected_storage<-input$storage_name
selected_cols_1<-input$attributes_name_1
selected_cols_2<-input$attributes_name_2
storage_stocks<- subset(stocks,仓库名称==selected_storage)
if (selected_storage =="全部")
product_attrs_detail <- aggregate(cbind(库存, 占用库存, 可用库存) ~ get(selected_cols_1)+get(selected_cols_2),data = stocks, FUN = sum)
else
#按照选择“仓库”过滤数据,这个不能刚在条件语句内，否则会认为对象为定义
# storage_stocks<- subset(stocks,仓库名称==selected_storage)
product_attrs_detail <- aggregate(cbind(库存, 占用库存, 可用库存) ~ 仓库名称+get(selected_cols_1)+get(selected_cols_2), data = storage_stocks, FUN = sum)
#按照选择的“属性”命名对应的表格标题
names( product_attrs_detail)[names( product_attrs_detail) == "get(selected_cols_1)"] <- selected_cols_1
names( product_attrs_detail)[names( product_attrs_detail) == "get(selected_cols_2)"] <- selected_cols_2
#返回聚合结果作为表格
#按照”父级“列排序
product_attrs_detail<-product_attrs_detail[order(product_attrs_detail[[selected_cols_1]]), ]
# 返回聚 合结果作为表格
return(product_attrs_detail, class = "custom-table")
})
}
# 运行应用
shinyApp(ui = attr_select_1, server = server)
library(shiny)
library(DT)
ui <- fluidPage(
tags$head(
tags$style(HTML("
.custom-table {
font-size: 14px;
border-collapse: collapse;
width: 100%;
}
.custom-table th,
.custom-table td {
border: 1px solid #ddd;
padding: 8px;
}
.custom-table tr:nth-child(even){background-color: #f2f2f2;}
"))
),
DT::dataTableOutput("myTable")
)
server <- function(input, output) {
output$myTable <- DT::renderDataTable({
data <- data.frame(
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 35)
)
return(data, class = "custom-table") # 应用CSS类
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
ui <- fluidPage(
tags$head(
tags$style(HTML("
.custom-table {
font-size: 14px;
border-collapse: collapse;
width: 100%;
}
.custom-table th,
.custom-table td {
border: 1px solid #ddd;
padding: 8px;
}
.custom-table tr:nth-child(even){background-color: #f2f2f2;}
"))
),
DT::dataTableOutput("myTable")
)
server <- function(input, output) {
output$myTable <- DT::renderDataTable({
data <- data.frame(
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 35)
)
return(data, class = "custom-table") # 应用CSS类
})
}
shinyApp(ui, server)
View(stocks)
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/属性汇总')
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
# 自定义进度函数
custom_progress <- function(down, up, total) {
if (total > 0) {
progress(down / total)
}
}
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
library(shinydashboard)
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
print(Permanent_patoken())
print(Permanent_patoken($drp_token))
print(Permanent_patoken()$drp_token)
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
install.packages("plotly")
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
shiny::runApp('Library/CloudStorage/OneDrive-个人/R实践学习/BI中心')
install.packages("plotly")
shiny::runApp()
install.packages("plotly")
# 示例数据框
df <- data.frame(
Level1 = c("A", "A", "B", "B"),
Level2 = c("A1", "A2", "B1", "B2"),
Level3 = c("A1a", "A2a", "B1a", "B2a"),
stringsAsFactors = FALSE
)
# 初始化 labels 和 parents
labels <- character()
parents <- character()
# 遍历每一列，生成 labels 和 parents
for (i in seq_along(df)) {
current_level <- df[[i]]
if (i == 1) {
# 第一列的父级为空字符串
labels <- unique(current_level)
parents <- rep("", length(labels))
} else {
previous_level <- df[[i - 1]]
new_labels <- unique(current_level)
new_parents <- sapply(new_labels, function(label) {
parent_index <- match(label, current_level)
previous_level[parent_index]
})
labels <- c(labels, new_labels)
parents <- c(parents, new_parents)
}
}
# 将列表转换为向量
labels <- as.vector(labels)
parents <- as.vector(parents)
# 打印结果
print(labels)
print(parents)
# 安装必要的包
install.packages("plotly")
library(plotly)
# 假设这是你的数据框，df的最后一列是value
df <- data.frame(
level1 = c("A", "A", "B", "B"),
level2 = c("A1", "A2", "B1", "B2"),
level3 = c("A1a", "A2a", "B1a", "B2a"),
value = c(10, 15, 25, 30)
)
# 初始化labels, parents, 和values
labels <- c()
parents <- c()
values <- c()
# 循环遍历每一行数据，构建treemap的labels, parents 和 values
for(i in 1:nrow(df)) {
# 添加level3的label和value
labels <- c(labels, df[i, "level3"])
parents <- c(parents, df[i, "level2"])
values <- c(values, df[i, "value"])
# 添加level2的label，如果它是该level1的第一个出现的项
if(!df[i, "level2"] %in% labels) {
labels <- c(labels, df[i, "level2"])
parents <- c(parents, df[i, "level1"])
values <- c(values, sum(df$value[df$level2 == df[i, "level2"]])) # 聚合其value
}
# 添加level1的label
if(!df[i, "level1"] %in% labels) {
labels <- c(labels, df[i, "level1"])
parents <- c(parents, "Root")  # level1的父级是Root
values <- c(values, sum(df$value[df$level1 == df[i, "level1"]])) # 聚合其value
}
}
# 创建plotly的treemap
plot_ly(
type = "treemap",
labels = labels,
parents = parents,
values = values
)
